% 
%  Plot errors in eigenvalues and vectors
%
% Examples:
%   plotEigErrors -case=diskOrder4  -savePlots=0
%   plotEigErrors -case=diskOrder4  -savePlots=0
%   plotEigErrors -case=pipeOrder4 -numEigsToPlot=10 -savePlots=0
%   plotEigErrors -case=pipeOrder2 -numEigsToPlot=10 -savePlots=0
%

function plotEigErrors(varargin)


  clearvars -except varargin;
  clear global;

  % --- Clear all open figures ----
  clearOpenFigures(1:1);

  caseOption = 'disk'; 
  figDir = '../doc/fig';

  numEigsToPlot=6; 
  useSquareRootOfEigs=0; 

  yMin=100; yMax=1; 
  savePlots=0;

  % --- read command line args ---
  for i = 1 : nargin
    line = varargin{i};
    caseOption          = getString( line,'-caseOption',caseOption );
    caseOption          = getString( line,'-case',caseOption );

    useSquareRootOfEigs = getInt( line,'-useSquareRootOfEigs',useSquareRootOfEigs );
    savePlots           = getInt( line,'-savePlots',savePlots );
    numEigsToPlot       = getInt( line,'-numEigsToPlot',numEigsToPlot );
    yMax                = getReal( line,'-yMax',yMax );
    yMin                = getReal( line,'-yMin',yMin );
  end 


  %% inputs
  % set line width, marker size, font size, figure size, and file type
  plotStyle
  fs=24;
  % 
  % titles:
  % 1 - long case name
  % 2 - readable
  % 3 - none
  titleOption = 2;
  bigLabels = 1;
  
  if bigLabels
    fs = 22;
    ms = 14;
    lw = 3;
  end
  set(0,'DefaultLineMarkerSize',ms);
  set(0,'DefaultLineLineWidth',lw);
  set(0,'DefaultAxesFontSize',fs);
  set(0,'DefaultLegendFontSize',fs);

%% files for cases
% read data from the file generated by conv.p 

  nd=2;  % Number of space dimensions
  
  if( strcmp(caseOption,'diskOrder2')==1 )
  
    % ---------- DISK ORDER=2  ----------
    order=2;

    Cases = { ...
        'diskG4O2Ev32',...
        'diskG8O2Ev32',...
        'diskG16O2Ev32',...
        'diskG32O2Ev32',...
        };
    % initial grid spacing
    N0 = [40,80,160,320];   
    nCases = length(Cases);
  
    %% generate figure titles
    Titles = { ...
      'Disk Order 2', ...
      'Unknown', ...%
      };
  
    plotName = 'diskOrder2';
  
  elseif( strcmp(caseOption,'diskOrder4') )
  
    % ---------- DISK ORDER=4  ----------
    order=4;
    Cases = { ...
        'diskG4O4Ev32',...
        'diskG8O4Ev32',...
        'diskG16O4Ev32',...
        'diskG32O4Ev32',...    
      };    
    % initial grid spacing
    N0 = [40,80,160,320];   
    nCases = length(Cases);
  
    %% generate figure titles
    Titles = { ...
      'Disk Order 4', ...
      'Unknown', ...%
      };
  
    plotName = 'diskOrder4';

  elseif( strcmp(caseOption,'pipeOrder2') )
  
    % ---------- DISK ORDER=4  ----------
    order=2;
    Cases = { ...
        'pipeG2O2Ev32',...
        'pipeG4O2Ev32',...
        'pipeG8O2Ev32',...
      };    
    % initial grid spacing
    N0 = [20,40,80];   
    nCases = length(Cases);
  
    %% generate figure titles
    Titles = { ...
      'Pipe Order 2', ...
      'Unknown', ...%
      };
  
    plotName = 'pipeOrder2';

  elseif( strcmp(caseOption,'pipeOrder4') )
  
    % ---------- DISK ORDER=4  ----------
    order=4;
    Cases = { ...
        'pipeG2O4Ev32',...
        'pipeG4O4Ev32',...
        'pipeG8O4Ev32',...
      };    
    % initial grid spacing
    N0 = [20,40,80];   
    nCases = length(Cases);
  
    %% generate figure titles
    Titles = { ...
      'Pipe Order 4', ...
      'Unknown', ...%
      };
  
    plotName = 'pipeOrder4';

  elseif( strcmp(caseOption,'sphereOrder2') )
  
    % ---------- SPHERE ORDER=2  ----------
    order=2;
    Cases = { ...
        'sphereG2O2Ev32',...
        'sphereG3O2Ev32',...
        'sphereG4O2Ev32',...
        'sphereG6O2Ev32',...
        'sphereG8O2Ev32',...
      };    
    % initial grid spacing
    N0 = [20,30,40,60,80];   
    nCases = length(Cases);
  
    %% generate figure titles
    Titles = { ...
      'Sphere Order 2', ...
      'Unknown', ...%
      };
  
    plotName = 'sphereOrder2';


  elseif( strcmp(caseOption,'sphereOrder4') )
  
    % ---------- SPHERE ORDER=4  ----------
    order=4;
    Cases = { ...
        'sphereG2O4Ev32',...
        'sphereG3O4Ev32',...
        'sphereG4O4Ev32',...
        'sphereG6O4Ev32',...
        'sphereG8O4Ev32',...
      };    
    % initial grid spacing
    N0 = [20,30,40,60,80];   
    nCases = length(Cases);
  
    %% generate figure titles
    Titles = { ...
      'Sphere Order 4', ...
      'Unknown', ...%
      };
  
    plotName = 'sphereOrder4';


  else
     fprintf('ERROR: unknown caseOption=%s\n',caseOption);
     pause;
     pause;
     pause;
  end;   


  %% ------------- generate plots -------------------

  icase=1; 
  fprintf('------- caseOption=%s, nCases=%d, useSquareRootOfEigs=%d----------\n',caseOption,nCases,useSquareRootOfEigs);

  % numEigsToPlot =10;
  eigRelErr = zeros( nCases,numEigsToPlot );
  evectRelErr = zeros( nCases,numEigsToPlot );
  hv = zeros(nCases,1);
  for n=1:nCases
    myCase = sprintf('../results/%s',Cases{n});
    run(myCase);


    if( useSquareRootOfEigs )
      if( n==1 )
        if( exist('eigSquareRootErr','var') )
         squareRootErrorsFound=1;
         fprintf('eigSquareRootErr found.\n');
        else
         fprintf('eigSquareRootErr variable NOT found -- setting to 0.5 * eigErr which is a good estimate.\n');
         squareRootErrorsFound=0;
        end
      end
 

      if( squareRootErrorsFound )
        eigRelErr(n,1:numEigsToPlot) = eigSquareRootErr(1:numEigsToPlot);
      else
        eigRelErr(n,1:numEigsToPlot) = 0.5 * eigErr(1:numEigsToPlot);
      end
    else
      eigRelErr(n,1:numEigsToPlot) = eigErr(1:numEigsToPlot);
    end

    evectRelErr(n,1:numEigsToPlot) = evectErr(1:numEigsToPlot);
    hv(n) = 1/N0(n); 
 
  end



   % % COLOURS 
   % lc1 =[.1,.6,.9]; % line colour for G1 purple
   % % lc2 =[.9,.2,.5]; % line colour for G2  -- redish
   % lc2 =[.1,.9,.6]; % line colour for G2  -- green-blue
   % lc4 =[.2,.2,1]; % line colour for G4
   % % lc8 =[.3,1,.3]; % line colour for G8
   % % lc8 =[.6,.3,.9]; % line colour for G8 purple
   % % lc8 =[.5,.2,.8]; % line colour for G8
   % %%lc8 =[.8,.2,.5]; % line colour for G8
   % lc8 =[.7,.3,.9]; % purple

  purple   =[.6 .4 1];
  green   =[.0 1 .5];

  medBlue  =[.3 .3 1];
  lightBlue=[.8 .8 1];

  medRed   =[1 .3 .3 ];
  lightRed =[1 .8 .8 ];

  numMarkers=10; 
  markers{1} ='x';
  markers{2} ='o';
  markers{3} ='+';
  markers{4} ='d';
  markers{5} ='^';
  markers{6} ='>';
  markers{7} ='p';
  markers{8} ='s';
  markers{9} ='x';
  markers{10}='o';

  for plotType=1:2 
    % plot errors in eigenvalues or eigenvectors 
    figure(plotType);

    if plotType==1
      err = eigRelErr;
    else
      err = evectRelErr;
    end
 
    leg = {};
    num=1; 
    for ie=1:1:numEigsToPlot
      iep = mod( ie-1,numMarkers )+1; 
      loglog( hv,err(:,ie),'-', 'Marker', markers{iep} ); hold on;
      if( useSquareRootOfEigs ) lam = sqrt(lambdav(ie)); else lam=lambdav(ie); end 
      leg{num} = sprintf('\\lambda %5.2f',lam); num=num+1;
    end

    aveErr1 = exp(sum( log(err(1,1:numEigsToPlot)) )/numEigsToPlot ); % average error at start
    expected = aveErr1*(hv/hv(1)).^order; 
    % expected = err(1,1)*(hv/hv(1)).^order; 
    loglog( hv,expected,'k-','LineWidth',2 );
    leg{num} = sprintf('h^%d ref',order); num=num+1;
 
    if( plotType==2 )
      % aveErr1 = sum(err(1,1:numEigsToPlot))/numEigsToPlot; % average error at start
      aveErr1 = exp(sum( log(err(1,1:numEigsToPlot)) )/numEigsToPlot ); % average error at start
      expected = aveErr1*(hv/hv(1)).^(order+1); 
      % expected = err(1,1)*(hv/hv(1)).^(order+1); 
      loglog( hv,expected,'k--','LineWidth',2 );
      leg{num} = sprintf('h^%d ref',(order+1));
    end 

    hold off;
   
    % loglog( hv,eigRelErr,'b-x', hv,evectRelErr,'r-o', hv,expected4,'k-' );

    if plotType==1
      title(sprintf('%s: Eigenvalue Errors',Titles{1}));
    else
      title(sprintf('%s: Eigenvectors Errors',Titles{1}));
    end
    % legend('\lambda-err','\phi-err','order 4');
    lgd=legend( leg,'Location','best' );
    lgd.FontSize = 20;

    xlabel('h'); ylabel('max relative error');

    h1 = hv;
    Ng = nCases;
    NN = round(1./h1);
    xticks = {};
    for i = 1:Ng
      xticks{i} = sprintf('$1/%d$',NN(i));
    end
    set(gca,'xtick',h1(end:-1:1));
    set(gca,'xticklabel',xticks(end:-1:1),'ticklabelinterpreter','latex');

    % set(gca,'ytick',10.^(-16:2:2));
    set(gca,'ytick',10.^(-16:1:2));
      
    % ylim([1.e-10,.1]);

    xlim([min(h1),max(h1)]);
    if( yMin < yMax )
      ylim([yMin,yMax]);
    end
      
    %% grid
    grid on;
    set(gca,'xminorgrid','off');   set(gca,'xminortick','off');   set(gca,'yminorgrid','off');   set(gca,'yminortick','off');

    set(gca,'fontsize',fs);

    drawnow;
    % make sure figure size is correct
    pos = get(gcf,'position');  
    pos(3) = xwidth;
    pos(4) = ywidth;
    set(gcf,'position',pos);

    if savePlots 
      if plotType==1
        plotFileName = sprintf('%s/%sEigenvalueErrors',figDir,plotName);
      else
        plotFileName = sprintf('%s/%sEigenvectorErrors',figDir,plotName);        
       %  plotFileName = 'diskEigenvectorErrors';
      end
      savePlotFile(plotFileName,'pdf'); 
    end

  end % plotType

end

