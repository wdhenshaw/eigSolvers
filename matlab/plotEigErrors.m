% 
%  Plot errors in eigenvalues and vectors
%


%
%  Plot convergence rate graphs for WaveHoltz 
%
%  cd /Users/henshaw/DropBox/AMP/waho/codes
%
% Examples:
%   plotRates -case=disk -yMin=1e-8 -yMax=.5 -savePlots=0
%   plotRates -case=pipe -yMin=100 -yMax=-1 -savePlots=0
%

function plotEigErrors(varargin)


  clearvars -except varargin;
  clear global;

  % --- Clear all open figures ----
  clearOpenFigures(1:1);

  caseOption = 'disk'; 

  yMin=100; yMax=1; 
  savePlots=0;

  % --- read command line args ---
  for i = 1 : nargin
    line = varargin{i};
    caseOption       = getString( line,'-caseOption',caseOption );
    caseOption       = getString( line,'-case',caseOption );

    savePlots        = getInt( line,'-savePlots',savePlots );
    yMax             = getReal( line,'-yMax',yMax );
    yMin             = getReal( line,'-yMin',yMin );
  end 


%% inputs
% set line width, marker size, font size, figure size, and file type
plotStyle
fs=24;
% 
% titles:
% 1 - long case name
% 2 - readable
% 3 - none
titleOption = 2;
bigLabels = 1;

if bigLabels
  fs = 22;
  ms = 14;
  lw = 3;
end
set(0,'DefaultLineMarkerSize',ms);
set(0,'DefaultLineLineWidth',lw);
set(0,'DefaultAxesFontSize',fs);
set(0,'DefaultLegendFontSize',fs);

%% files for cases
% read data from the file generated by conv.p 

nd=2;  % Number of space dimensions

if( strcmp(caseOption,'disk')==1 )

  % ---------- DISK ----------

  Cases = { ...
    'diskG2Order4',...
    'diskG4Order4',...
    'diskG8Order4',...
    'diskG16Order4',...
    };


  % initial grid spacing
  N0 = [20,40,80,160];   
  nCases = length(Cases);

  %% generate figure titles
  Titles = { ...
    'Disk', ...
    'Unknown', ...%
    };

  plotName = { ...
             'diskEigenpairErrors',...
             };

else
   fprintf('ERROR: unknown caseOption=%s\n',caseOption);
   pause;
   pause;
   pause;
end;   


  %% ------------- generate plots -------------------

  icase=1; 
  fprintf('------- caseOption=%s, nCases=%d ----------\n',caseOption,nCases);

 numEigs =10;
 eigRelErr = zeros( nCases,numEigs );
 evectRelErr = zeros( nCases,numEigs );
 hv = zeros(nCases,1);
 for n=1:nCases
   run(Cases{n});

   eigRelErr(n,1:numEigs) = eigErr(1:numEigs);
   evectRelErr(n,1:numEigs) = evectErr(1:numEigs);
   hv(n) = 1/N0(n); 

 end



   % % COLOURS 
   % lc1 =[.1,.6,.9]; % line colour for G1 purple
   % % lc2 =[.9,.2,.5]; % line colour for G2  -- redish
   % lc2 =[.1,.9,.6]; % line colour for G2  -- green-blue
   % lc4 =[.2,.2,1]; % line colour for G4
   % % lc8 =[.3,1,.3]; % line colour for G8
   % % lc8 =[.6,.3,.9]; % line colour for G8 purple
   % % lc8 =[.5,.2,.8]; % line colour for G8
   % %%lc8 =[.8,.2,.5]; % line colour for G8
   % lc8 =[.7,.3,.9]; % purple

  purple   =[.6 .4 1];
  green   =[.0 1 .5];

  medBlue  =[.3 .3 1];
  lightBlue=[.8 .8 1];

  medRed   =[1 .3 .3 ];
  lightRed =[1 .8 .8 ];

  markers{1}='x';
  markers{2}='o';
  markers{3}='+';
  markers{4}='d';
  markers{5}='^';
  markers{6}='>';

  for plotType=1:2 
    % plot errors in eigenvalues or eigenvectors 
    figure(plotType);

    if plotType==1
      err = eigRelErr;
    else
      err = evectRelErr;
    end
 
   leg = {};
   num=1; 
   for ie=1:1:6
     loglog( hv,err(:,ie),'-', 'Marker', markers{ie} ); hold on;
     leg{num} = sprintf('\\lambda %5.2f',lambdav(ie)); num=num+1;
   end


   expected4 = err(1,1)*(hv/hv(1)).^4; 
   loglog( hv,expected4,'k-' );
   leg{num} = 'h^4 ref';
   hold off;
   
   % loglog( hv,eigRelErr,'b-x', hv,evectRelErr,'r-o', hv,expected4,'k-' );

   if plotType==1
     title('Disk: Errors in Eigenvalues');
   else
     title('Disk: Errors in Eigenvectors');
   end
   % legend('\lambda-err','\phi-err','order 4');
   lgd=legend( leg,'Location','best' );
   lgd.FontSize = 20;

   xlabel('h'); ylabel('max relative error');

    h1 = hv;
    Ng = nCases;
    NN = round(1./h1);
    xticks = {};
    for i = 1:Ng
      xticks{i} = sprintf('$1/%d$',NN(i));
    end
    set(gca,'xtick',h1(end:-1:1));
    set(gca,'xticklabel',xticks(end:-1:1),'ticklabelinterpreter','latex');

    % set(gca,'ytick',10.^(-16:2:2));
    set(gca,'ytick',10.^(-16:1:2));
    
    % ylim([1.e-10,.1]);

    xlim([min(h1),max(h1)]);
    if( yMin < yMax )
      ylim([yMin,yMax]);
    end
    
    %% grid
    grid on;
    set(gca,'xminorgrid','off');   set(gca,'xminortick','off');   set(gca,'yminorgrid','off');   set(gca,'yminortick','off');

    set(gca,'fontsize',fs);

    drawnow;
    % make sure figure size is correct
    pos = get(gcf,'position');  
    pos(3) = xwidth;
    pos(4) = ywidth;
    set(gcf,'position',pos);

    if savePlots 
      if plotType==1
        plotFileName = 'diskEigenvalueErrors';
      else
        plotFileName = 'diskEigenvectorErrors';
      end
      savePlotFile(plotFileName,'pdf'); 
    end

  end % plotType

end

%  % -------- OLD ---

%   n=1; 
%   [h1,uv1]=getData(n,Cases,N0); n=n+1;
%   if( nCases>1 ) 
%     [h2,uv2]=getData(n,Cases,N0); n=n+1; 
%   end
%   if( nCases>2 )
%     [h3,uv3]=getData(n,Cases,N0); n=n+1; 
%   end

%   % figure
%   figure(1)
  
%   % number of refinements
%   Ng = length(uv1);

%   %% --- get reference line3 ----
%   order2= 2; % expected order
%   [expected2] = getReferenceLine( uv1,uv1,order2,Ng );
%   order4 = 4; % expected order
%   Ng4 = length(uv2);
%   [expected4] = getReferenceLine( uv2,uv2,order4,Ng4 );

%   purple   =[.6 .4 1];
%   green   =[.0 1 .5];

%   medBlue  =[.3 .3 1];
%   lightBlue=[.8 .8 1];

%   medRed   =[1 .3 .3 ];
%   lightRed =[1 .8 .8 ];

%   %% plot
%   h = ...
%   loglog(h1,uv1,'-ob','linewidth',lw,'markersize',ms,'MarkerFaceColor',medBlue  ,'MarkerEdgeColor','k');
%   hold on;

%   loglog(h2,uv2,'-d','color',green,'linewidth',lw,'markersize',ms,'MarkerFaceColor',green,'MarkerEdgeColor','k');

%   if( nCases>2 )
%     loglog(h3,uv3,'-or','linewidth',lw,'markersize',ms,'MarkerFaceColor',medRed   ,'MarkerEdgeColor','k');
%   end

%   % pause; % ********

%   % loglog(h4,ev4,'-dr','linewidth',lw,'markersize',ms,'MarkerFaceColor',lightRed ,'MarkerEdgeColor','k');
%   % loglog(h4,pv4,'-^r','linewidth',lw,'markersize',ms,'MarkerFaceColor',lightRed ,'MarkerEdgeColor','k');
%   % h1
%   % expected2

%   loglog(h1,expected2,'k--','linewidth',lw,'markersize',ms);
%   loglog(h2,expected4,'k-.','linewidth',lw,'markersize',ms);
%   hold off;


%   %% labels
%   title(Titles{icase},'interpreter','latex');
%   ylabel('Max error','interpreter','latex');
%   xlabel('$h$','interpreter','latex');

%   %% create legend
%   if( 1==1 || strcmp(caseOption,'square') || strcmp(caseOption,'disk')  )
%     leg = legend('u : O2', ...
%                  'u : O4', ...
%                  '$h^2$ ref',...
%                  '$h^4$ ref',...
%                  'Location','SouthEast');

%   elseif( strcmp(caseOption,'disk') || strcmp(caseOption,'diskPC') || ...
%           strcmp(caseOption,'square') || strcmp(caseOption,'squarePC') )
%     leg = legend('$\mathbf{u}$, D','$p$, D', ...
%                  '$\mathbf{u}$, T','$p$, T', ...
%                  '$h^2$ ref',...
%                  'Location','SouthEast');   

 
%   else
%     error('unknown caseOption');
%   end
%   set(leg,'interpreter','latex');

%   %% create xticks
%   %% set(gca,'XLim',[0.125,1]/N0(n));

%   xlim([min(h1),max(h1)]);
%   if( yMin < yMax )
%     ylim([yMin,yMax]);
%   end

%   NN = round(1./h1);
%   xticks = {};
%   for i = 1:Ng
%     xticks{i} = sprintf('$1/%d$',NN(i));
%   end
%   set(gca,'xtick',h1(end:-1:1));
%   set(gca,'xticklabel',xticks(end:-1:1),'ticklabelinterpreter','latex');

%   % set(gca,'ytick',10.^(-16:2:2));
%   set(gca,'ytick',10.^(-16:1:2));
  
%   % ylim([1.e-10,.1]);
  
%   %% grid
%   grid on;
%   set(gca,'xminorgrid','off');   set(gca,'xminortick','off');   set(gca,'yminorgrid','off');   set(gca,'yminortick','off');

%   set(gca,'fontsize',fs);

%   drawnow;
%   % make sure figure size is correct
%   pos = get(gcf,'position');  
%   pos(3) = xwidth;
%   pos(4) = ywidth;
%   set(gcf,'position',pos);

%  if savePlots 
%    savePlotFile(plotName{icase},'pdf'); 
% end

%    % name = sprintf('%s',plotName{icase});
%    % print('-depsc',name);
%    % fprintf('Wrote file [%s]\n',name); 
%    % system(sprintf('/Users/henshaw/bin/pspdf %s',name),'-echo');



  
% end


% %-----------------------------------------------------------------------
% % Return the errors from the conv.p matlab file
% %-----------------------------------------------------------------------
% function [h,uv]=getData( n,Cases,N0 )

%   % if length(Cases{n}) >= 63
%   %   % my matlab doesn't run really long file names for some reason...
%   %   newFile = [Cases{n}(1:60),'.m']; 
%   %   copyfile([Cases{n},'.m'],newFile);
%   %   run(newFile);
%   % else
%   %   run(Cases{n});
%   % end
%   run(Cases{n});

%   h  = hh/N0(n); % grid spacing starts at 1/10 for this case
%   uv = u0;

  
% end

% %-----------------------------------------------------------------------
% %% --- reference line ----
% % place reference line inside largest gap between lines
% %-----------------------------------------------------------------------
% function [expected] = getReferenceLine( ev1,pv1,order,Ng )
%   lastErrors = [ev1(end),pv1(end)];
%   if ev1(end) < 1e-14
%     lastErrors = [pv1(end)];
%   end
%   lastErrorsSorted = sort(lastErrors);
%   [~,I] = max(diff(log(lastErrorsSorted)));
%   avgErr = exp(mean(log(lastErrorsSorted(I:(I+1)))));

%   expected = avgErr*(2^order).^((Ng-1):(-1):0);
% end


